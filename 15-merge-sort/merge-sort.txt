Objectives
1. What are the drawbacks of first 3 sorts 
2. We will learn 3 more sorts
    a. Merge sort 
    b. Quick sort 
    c. radix sort


the sorting algos we learned till now dont work fast for more than 20 items 
1. the family of algo we will learn now reduce the time complexity 
from O(n2) to O(n logn)

2. there is trade off between efficiency and simplicity 
3. the more efficient algo are much simpler and generally takes longer to understand 

MERGE SORT 
1. It is a combination of merging and sorting, acutally 3 things 
   splitting up, sorting and merging 
2. It exploits the fact that arrays with 0 or 1 items are always sorted 
3. Works by decomposing larger arrays into smaller arrrays of 1 or 0 items 


Merging sorted arrays 
1. In order to implement merge sort, we need to have a fucntion responsible for 
   merging 2 sorted arrays 
2. Given 2 arrays which are sorted this helper function should create a new array 
   which is also sorted, and consists of all the elements in the two input arrays 

3. This function should run in O(n + m) time and O(n + m) space and should not 
   modify the parameters passed to it 



Sorting part of merge sort 

1. In merge sort we have to break the arrays in 2 halfs untill you have arrays that are 
   empty  or have one element
2. So for that we can use slice for it 
3. Once you have smaller sorted arrays we merge those arrays with other sorted arrays untill 
   you are back at the full lenth of array 


Big O of merge sort 

Time complexity 
1. Best case: O(n logn)
2. Average case: O(n log n)
3. Worst case: O(n log n)

Space Complexity: O(n)