STACKS
What: 
1. Abstract ds, collection of data  
2. LIFO : last in first out 
3. More than 1 way to implement stack, we can also use linked list , array
4. not a built in JS DS 

Use cases:
1. managing function invocations 
2. undo and redo functionality 
3. Routing (the history object) is treated like a stack 

Implementation:
1. ARRAY ==> Easiest way is to use an array 
    if we use push and pop methods only we can make a stack 
    using other methods on the array will not obey stack rules 
    a) push/pop
    b) unshift/shift - (add at the start/remove from start)

  We remember from the beginning adding to the start annd removing from the start 
  is not a good thing as far as big O notation time complexity 

  If you care about efficiency then you should not use array for stack 
  Especially unshift and shift 
  push/pop >>>>> unshift/shift   ==> time complexity 

We will use some other alogrithms which will use stacks and Queues


2. SINGLY LINKED LIST  
IMP: We can use singly linked list for stack, right?
NOO: because when we use pop method of the singly linked list it is not constant time 
because we traverse from the start to the end and this is not constant time  
BUT Stack requires pop to be constant time 

So instead it is much better to use shift and unshift, except just name them push and pop


Big O of stacks 

Pusing and poping are both constant time

1. Insertion: O(1)
2. Removal: O(1)
3. Searching: O(N)
4. Access: O(N)

Stacks matter a lot for insertion and removal, but for searching and access we have 
other DSs like arrays or ssome other DSs

some languages come with their own stack implmentations, but JS does not 

QUEUES 

1. Define Queues
2. Understand usecases
3. Implement operations on a queue DS


What is a queue?

Similar to stack, 2 main things which we do are 
a. Add data 
b. Remove data

Queue is a FIFO


Where do we use it 
a. Background tasks 
b. Waiting lists in game 
c. Uploading resources
d. Printing tasks 

We can implement queues with 
1. Queue class 
2. arrays 

there are many ways we can create a queue but the only thing which we have to be 
aware of is that it is FIFO 

Queues with arrays  : WRONG way 
1. we can pick either adding to the beggining or to the end 
2. WE have to remove 1 first then 2 and then 3
3. So we cannot use pop
4. We use shift

CORRECT WAY
if we have 10000 items then removing from the begginng means that every single item is 
reindexed so adding to the end of array doesnt require reindexing 
SO WE WILL ADD TO THE BEGGINING AND REMOVE FROM LAST 

ADD : unshift - adds at the start 
REMOVE : pop - removes from last 

push+shift VS unshift+pop 

in both we have a drawback 
1. in first push will push at end but shift we remove from start (indexing issue)
2. in second unshift will add at start (indexing issue) and pop will remove from end (no issue)


SO ideally it makes more sense to just create our own class for queue 

2. Linked list based queue 

a. Add: start | Remove: end
b. Add: end - enqueue(push) | Remove: start - dequeue(shift)   -> Correct 
 
removing from the end in singly linked lists is slow 

so we will add to the end and remove from the beginning 

BIG O of queue 

Insertion: O(1)
Removal: O(1)
Searching: O(n)
Access: O(n)

In aarray the insertion and removal was not constant time because of reindexing 