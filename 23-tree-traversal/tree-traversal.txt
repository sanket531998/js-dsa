There can be any tree not just binary tree   
a. Binary search tree 
b. Plain binary tree 
c. Terniary tree 

If it is a random tree, we have to visit all the nodes to find out the particular node 

BUT WE HAVE TO VISIT EVERY NODE ONCE 

Traversing a tree, 2 main approaches 
1. BREADTH-FIRST SEARCH 
2. DEPTH-FIRST SEARCH 

Breadth first search, basically searching in horizontal way 

Depth first search has 3 things
Idea being: going down 

1. DFS - Inorder
2. DFS - Preorder 
3. DFS - Postorder 

BFS intro  
        10
      6    15
    3   8    20

[10, 6, 15, 3, 8, 20] 

BFS means we will visit every node on the same level the go to the next line 
IMPLEMETING BFS 
1. Create a queue (this can be an array) and a variable to store the values of nodes 
   visited 
   When we are using the queue approach the end goal is to return this 
   [10, 6, 15, 3, 8, 20] 


queue: To help us keep track of things - this is just to help us out 
List of data to return at the end 

In JS empty array is truthy 


1] DFS - PRE-ORDER
    1. We visit the root node first 
    2. Then we visit the left
    3. Then we visit the right 

        10
      6    15
    3   8    20

[10, 6, 3, 8, 15, 20] 


2] DFS - POST-ORDER
    1. First we vist the left
    2. Then we visit the right 
    3. Then we visit the root 

        10
      6    15
    3   8    20

[3, 8, 6, 20, 15, 10] 


3] DFS - IN-ORDER 
    1. First we vist the left
    2. Then we visit the root 
    3. Then we visit the right 


         10
      6    15
    3   8    20

[3, 6, 8, 10, 15, 20 ] 